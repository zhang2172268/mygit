//1.实现strlen（计算字符串长度）

#include<stdio.h>
#include<assert.h>

//递归
int my_strlen(const char *str)
{
	assert(str != NULL);
	if (*str == '\0')
		return 0;
	else return 1 + my_strlen(str + 1);
}
////非递归
//int my_strlen(const char *str)
//{
//	int count = 0;
//	while (*str)
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
int main()
{
	char *p = "abcdef";
	int len = my_strlen(p);
	printf("%d\n", len);
	system("pause");
	return 0;
}



//2.实现strcpy（字符串的复制）
//把一个字符串复制到另一个字符串中

#include<stdio.h>
#include<assert.h>
//字符串复制函数
char *my_strcpy(char *dest, const char *src)
{
	char *ret = dest;
	assert(dest != NULL);//断言
	assert(src != NULL);
	while (*dest++ = *src++)
	{
		;
	}
	return ret;
}
int main()
{
	char arr[20] = { 0 };
	char *p = "abcde";
	my_strcpy(arr, p);
	printf("%s\n", arr);
	system("pause");
	return 0;
}
```
//3.实现strcat（字符串的拼接）
//把一个字符串拼接到另一个字符串的后面

#include<stdio.h>
#include<assert.h>
//字符串拼接函数
char *my_strcat(char *dest, const char *src)
{
	char *ret = dest;
	assert(dest != NULL);//断言
	assert(src != NULL);
	while (*dest)
	{
		dest++;
	}
	while (*dest++ = *src++)
	{
		;
	}
	return ret;
}
int main()
{
	char arr1[20] = "hellow ";
	char arr2[10] = "world!";
	my_strcat(arr1, arr2);
	printf("%s\n", arr1);
	system("pause");
	return 0;
}
```
//4.实现strstr（字符串中找字符串）
//在一个字符串中找出另一个字符串在这个字符串中第一次出现的位置

#include<stdio.h>
#include<assert.h>
//找字符串函数
char *my_strstr(const char *str, const char *substr)
{
	assert(str);
	assert(substr);
	if (*substr == '\0')
	{
		return str;
	}
	while (*str)
	{
		const char *s1 = str;
		const char *s2 = substr;
		while (*s1 && *s2 && *s1 == *s2)
		{
			s1++;
			s2++;
		}
		if (*s2 == '\0')
		{
			return str;
		}
		str++;
	}
	return NULL;
}
int main()
{
	char arr[] = "aabbcddf";
	char *ret = my_strstr(arr, "bcd");
	if (ret != NULL)
	{
		printf("%s\n", ret);
	}
	else
	{
		printf("不存在\n");
	}
	system("pause");
	return 0;
}
```


//5.实现strcmp（字符串的比较）
/*比较两个字符串的大小，先从两个字符串的首字母开始，比较是用ASSIC码进行比较，
如果那个字母的ASSIC码大，则这个字符串大，如果相等则进行下一个字符串比较，依次循环；
在C语言定义中大于输出正数，等于输出零，小于输出负数。*/

#include<stdio.h>
#include<assert.h>

char *my_strcmp(const char *str1, const char *str2)
{
	assert(str1);
	assert(str2);
	while (*str1 == *str2)
	{
		if (*str1 == '\0')
			return 0;
		str1++;
		str2++;
	}
	return *str1 - *str2;
	//返回两个字符串相减的结果，或正数，或零，或负数
}
int main()
{
	char *p = "abddhjkh";
	char *q = "abdhtuir";
	int ret = my_strcmp(p, q);
	if (ret > 0)
	{
		printf("p > q\n");
	}
	else if (ret == 0)
	{
		printf("p = q\n");
	}
	else
	{
		printf("p < q\n");
	}
	system("pause");
	return 0;
}

//6.实现memcpy（内存拷贝）
//实现的是将两个无关关系空间，将一个拷贝给另一个，但不能进行内存重叠拷贝

#include<stdio.h>
#include<assert.h>

void *my_memmove(void *dest, const void *src, size_t count)
{//void*不存在类型，无类型指针能存任何类型不能进行运算,size_t无符号类型      
	void *ret = dest;
	assert(dest);
	assert(src);
	while (count--)
	{
		*(char *)dest = *(char *)src;
		dest = (char *)dest + 1;
		src = (char *)src + 1;
	}
	return ret;
}
int main()
{
	int arr1[20] = { 0 };
	int arr2[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
	my_memmove(arr1, arr2, 16);
	system("pause");
	return 0;
}

//7.实现memmove（内存拷贝）
//既能拷贝两个无关系的内存空间，也能进行内存重叠拷贝；
//当内存重叠拷贝需要考虑两种情况：从前向后拷贝和从后向前拷贝。

#include<stdio.h>
#include<assert.h>

void *my_memmove(void *dest, const void *src, size_t count)
{
	void *ret = dest;
	assert(dest);
	assert(src);
	if (dest < src)
	{   //前-->后
		while (count--)
		{
			*(char *)dest = *(char *)src;
			dest = (char *)dest + 1;
			src = (char *)src + 1;
		}
	}
	else
	{   //后-->前
		while (count--)
		{
			*((char *)dest + count) = *((char *)src + count);
		}
	}
	return ret;
}
int main()
{
	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
	my_memmove(arr + 2, arr, 16);
	system("pause");
	return 0;
}
