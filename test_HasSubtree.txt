/* 树的子结构

   题目描述：
       输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）
 */

/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    bool judge(TreeNode* pRoot1, TreeNode* pRoot2){
        if(pRoot2 == NULL)
            return true;
        if(pRoot1 == NULL)
            return false;
        if(pRoot1->val == pRoot2->val){
            if(judge(pRoot1->left, pRoot2->left) && judge(pRoot1->right, pRoot2->right))
                return true;
        }
        return judge(pRoot1-> left, pRoot2) || judge(pRoot1-> right, pRoot2);
    }

    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2){
        if(pRoot2==NULL)
            return false;
        return judge(pRoot1, pRoot2);
    }
};
