/*剑指offer---二维数组的查找*/

/*题目描述：
	在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，
    每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，
    判断数组中是否含有该整数。
*/

/*解题思路：
	由于二维数组的元素从左到右、从上到下的顺序都是递增的，所以可以从右上角或者左下角的元素开始查找
    这里采用的是最左下角元素开始查找：
    	1.判断查找元素小于该位置元素，则向上一行进行查找
    	2.判断查找元素大于该位置元素，则向下一列进行查找
    	3.找到了，返回true
*/

class Solution {
public:
    bool Find(int target, vector<vector<int> > array){
        int rows = array.size();
        int cols = array[0].size();
        
        //从左下角开始查找
        int i = rows-1;
        int j = 0;
        while(i >= 0 && j < cols){
            //如果查找的元素小于该位置元素，向上一行查找
            if(target < array[i][j])
                i--;
            
            ///如果查找的元素大于该位置元素，向下一列查找
            else if(target > array[i][j])
                j++;
            
            //找到了
            else
                return true;
        }
        return false;
    }
};