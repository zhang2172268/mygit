#pragma once

/************************************/
//Stack.h

#define MAXSIZE 10

//typedef int SDataType;
//typedef char SDataType;

///////////////////////////
//迷宫定义的结构体与栈的数据类型不同

typedef struct Position
{
	int _x;
	int _y;
}Position;
typedef Position SDataType;
//////////////////////////

typedef struct Stack
{
	SDataType _array[MAXSIZE];
	int _top;   //标记栈顶元素
}Stack;

//初始化
void StackInit(Stack *ps);

//压栈
void StackPush(Stack *ps, SDataType data);

//出栈
void StackPop(Stack *ps);

//返回栈顶元素
SDataType StackTop(Stack *ps);

//返回栈空间长度
int StackSize(Stack *ps);

//栈是否为空
int StackEmpty(Stack *ps);

/****************************************/
//Stack.c
#include <assert.h>
#include <stdio.h>
#include <string.h>


//初始化
void StackInit(Stack *ps)
{
	assert(ps);
	ps->_top = 0;
}

//压栈
void StackPush(Stack *ps, SDataType data)
{
	assert(ps);
	if (MAXSIZE == ps->_top)
	{
		printf("栈空间已满，无法插入！！！\N");
		return;
	}
	ps->_array[ps->_top++] = data;
}

//出栈
void StackPop(Stack *ps)
{
	assert(ps);
	if (StackEmpty(ps))
		return;
	ps->_top--;
}

//返回栈顶元素
SDataType StackTop(Stack *ps)
{
	assert(ps);
	return ps->_array[ps->_top - 1];
}

//返回栈空间长度
int StackSize(Stack *ps)
{
	assert(ps);
	return ps->_top;
}

//栈是否为空
int StackEmpty(Stack *ps)
{
	assert(ps);
	return 0 == ps->_top;
}



//////////////////////////////////////////////////////////
#pragma once

#include <assert.h>
#include <stdio.h>
#include "Stack.h"
//typedef struct Position
//{
//	int _x;
//	int _y;
//}Position;


#define MAX_ROW 6
#define MAX_COL 6
typedef struct Maze
{
	int _map[MAX_ROW][MAX_COL];
}Maze;

//初始化迷宫
void InitMaze(Maze *m, int map[MAX_ROW][MAX_COL])
{
	int i = 0;
	int j = 0;
	assert(m);
	for (i = 0; i < MAX_ROW; i++)
	{
		for (j = 0; j < MAX_COL; j++)
		{
			m->_map[i][j] = map[i][j];
		}
	}
}

//打印迷宫
void PrintMaze(Maze *m)
{
	int i = 0;
	int j = 0;
	assert(m);
	for (i = 0; i < MAX_ROW; i++)
	{
		for (j = 0; j < MAX_COL; j++)
		{
			printf("%d  ", m->_map[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

//检测有效入口
int IsValidEntry(Maze *m, Position entry)
{
	if (entry._x == 0 || entry._x == MAX_ROW - 1
		|| entry._y == 0 || entry._y == MAX_COL - 1)
	{
		if (1 == m->_map[entry._x][entry._y])
			return 1;
	}
	return 0;
}

//是否通路
int IsPass(Maze *m, Position cur)
{
	return 1 == m->_map[cur._x][cur._y];//用1标记通路
}

//检测出口
int IsExit(Maze *m, Position cur, Position entry)
{
	if (cur._x == entry._x && cur._y == entry._y)
	{
		return 0;
	}
	if (cur._x == 0 || cur._x == MAX_ROW - 1
		|| cur._y == 0 || cur._y == MAX_COL - 1)
	{
		return 1;
	}
	return 0;
}

//走迷宫
void PassMaze(Maze *m, Position entry)
{
	Stack s;
	if (!IsValidEntry(m, entry))
	{
		printf("入口无效！！！\n");
		return;
	}

	StackInit(&s);
	StackPush(&s, entry);

	while (!StackEmpty(&s))
	{
		Position pos;
		Position next;
		pos = StackTop(&s);
		m->_map[pos._x][pos._y] = 2;//走过标记为2
		
		if (IsExit(m, pos, entry))
			return;

		//up向上侧走
		next = pos;
		next._x -= 1;
		if (IsPass(m, next))
		{
			StackPush(&s, next);
			continue;
		}
		//left向左侧走
		next = pos;
		next._y -= 1;
		if (IsPass(m, next))
		{
			StackPush(&s, next);
			continue;
		}
		//right向右侧走
		next = pos;
		next._y += 1;
		if (IsPass(m, next))
		{
			StackPush(&s, next);
			continue;
		}
		//down向下走
		next = pos;
		next._x += 1;
		if (IsPass(m, next))
		{
			StackPush(&s, next);
			continue;
		}

		m->_map[pos._x][pos._y] = 3;//当上左右下都走不通，然后把当前步标记为3
		//回退
		StackPop(&s);
	}
}


//测试函数
void TestMaze()
{
	int map[MAX_ROW][MAX_COL] = {
		{ 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 1, 0, 0, 0 },
		{ 0, 0, 1, 0, 0, 0 },
		{ 0, 0, 1, 1, 1, 0 },
		{ 0, 0, 1, 0, 1, 1 },
		{ 0, 0, 1, 0, 0, 0 },
	};
	Maze m;
	Position entry;
	InitMaze(&m, map);
	PrintMaze(&m);
	
	entry._x = 5;
	entry._y = 2;
	PassMaze(&m, entry);
	PrintMaze(&m);
}


//////////////////////////////////////////////////////////
#include "Maze.h"
int main()
{
	TestMaze();
	system("pause");
	return 0;
}

