//三数取中法(通过这种方法降低取到极值的概率)
int GetMiddleIndex(int *array, int left, int right)
{
	int mid = left + ((right - left) >> 1);
	if (array[left] < array[right - 1])
	{
		if (array[mid] < array[left])
			return left;
		else if (array[mid] > array[right - 1])
			return right - 1;
		else
			return mid;
	}
	else
	{
		if (array[mid] > array[left])
			return left;
		else if (array[mid] < array[right - 1])
			return right - 1;
		else
			return mid;
	}
}

//挖坑法
int Partion2(int *array, int left, int right)
{
	//找基准值
	int key = array[right - 1];
	int begin = left;
	int end = right - 1;
	
	while (begin < end)
	{
		//从左往右找比基准值大的元素
		while (begin < end && array[begin] <= key)
			begin++;

		if (begin < end)
		{
			array[end] = array[begin];
			end--;
		}

		//从右往左找比基准值小的元素
		while (begin < end && array[end] >= key)
			end--;

		if (begin < end)
		{
			array[begin] = array[end];
			begin++;
		}

	}

	array[begin] = key;
	return begin;
}


void QuickSort(int *array, int left, int right)//递归
{
	if (right - left > 1)
	{
		//在[left, right)找基准值来划分区间，最后返回基准值在区间中的位置
		int boundary = Partion1(array, left, right);
		//int boundary = Partion2(array, left, right);
		//int boundary = Partion3(array, left, right);
		QuickSort(array, left, boundary);
		QuickSort(array, boundary + 1, right);
	}
}
