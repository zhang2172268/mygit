//三数取中法(通过这种方法降低取到极值的概率)
int GetMiddleIndex(int *array, int left, int right)
{
	int mid = left + ((right - left) >> 1);
	if (array[left] < array[right - 1])
	{
		if (array[mid] < array[left])
			return left;
		else if (array[mid] > array[right - 1])
			return right - 1;
		else
			return mid;
	}
	else
	{
		if (array[mid] > array[left])
			return left;
		else if (array[mid] < array[right - 1])
			return right - 1;
		else
			return mid;
	}
}

int Partion3(int *array, int left, int right)
{
	//找基准值
	int key = array[right - 1];
	int cur = left;
	int prev = cur - 1;

	while (cur < right)
	{
		if (array[cur] < key && ++prev != cur)
			Swap(&array[prev], &array[cur]);

		++cur;
	}

	if (++prev != right-1)
		Swap(&array[right-1], &array[prev]);

	return prev;
}

void QuickSort(int *array, int left, int right)//递归
{
	if (right - left > 1)
	{
		//在[left, right)找基准值来划分区间，最后返回基准值在区间中的位置
		int boundary = Partion1(array, left, right);
		//int boundary = Partion2(array, left, right);
		//int boundary = Partion3(array, left, right);
		QuickSort(array, left, boundary);
		QuickSort(array, boundary + 1, right);
	}
}
