/*************************************************/
//BSTree.h



typedef int SDataType;

typedef struct BSTNode
{
	struct BSTNode *_pLeft;
	struct BSTNode *_pRight;
	SDataType _data;
}BSTNode;


//初始化二叉搜索树
void InitBSTree(BSTNode **pRoot);

//插入
void InsertBSTree(BSTNode **pRoot, SDataType data);

//删除
void DeleteBSTree(BSTNode **pRoot, SDataType data);

//查找
BSTNode *FindBSTree(BSTNode *pRoot, SDataType data);

//中序遍历二叉搜索树
void InorderBSTree(BSTNode *pRoot);

//销毁二叉搜索树
void DestroyBSTree(BSTNode **pRoot);




/*************************************************/
//BSTree.c


#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

//创建新结点
BSTNode *BuyBSTNode(SDataType data)
{
	BSTNode *pNewNode = NULL;
	pNewNode = (BSTNode *)malloc(sizeof(BSTNode));
	if (NULL == pNewNode)
	{
		assert(0);
		return;
	}

	pNewNode->_data = data;
	pNewNode->_pLeft = NULL;
	pNewNode->_pRight = NULL;

	return pNewNode;
}

//初始化二叉搜索树
void InitBSTree(BSTNode **pRoot)
{
	assert(pRoot);
	*pRoot = NULL;
}

//插入
void InsertBSTree(BSTNode **pRoot, SDataType data)
{
	assert(pRoot);
	BSTNode *pCur = NULL;
	BSTNode *pParent = NULL;

	//空树情况
	if (NULL == *pRoot)
	{
		*pRoot = BuyBSTNode(data);
		return;
	}

	//查找待插入节点的位置
	pCur = *pRoot;
	while (pCur)
	{
		pParent = pCur;
		if (data < pCur->_data)
		{
			pCur = pCur->_pLeft;
		}
		else if (data > pCur->_data)
		{
			pCur = pCur->_pRight;
		}
		else
			return;
	}

	//插入该节点
	pCur = BuyBSTNode(data);
	if (data < pParent->_data)
		pParent->_pLeft = pCur;
	else
		pParent->_pRight = pCur;

}

//删除
void DeleteBSTree(BSTNode **pRoot, SDataType data)
{
	assert(pRoot);
	BSTNode *pCur = NULL;
	BSTNode *pParent = NULL;

	if (NULL == *pRoot)//空树
		return;

	//找待删除结点的位置
	pCur = *pRoot;
	
	while (pCur)
	{
		if (data == pCur->_data)
			break;
		else if (data < pCur->_data)
		{
			pParent = pCur;
			pCur = pCur->_pLeft;
		}
		else
		{
			pParent = pCur;
			pCur = pCur->_pRight;
		}
	}
	if (NULL == pCur)//未找到要删除的结点-->直接返回
		return;

	//删除

	//只有右孩子 || 叶子
	if (NULL == pCur->_pLeft)
	{
		if (*pRoot == pCur)//如果要删结点是根结点-->将要删除结点的右子树作为删除后的根结点
			*pRoot = pCur->_pRight;
		else if (pParent->_pLeft == pCur)//待删除结点为双亲的左子树
			pParent->_pLeft = pCur->_pRight;//将待删结点的右子树最为双亲的左子树
		else							  //待删结点为双亲的右子树
			pParent->_pRight = pCur->_pRight;//将待删结点的右子树最为双亲的右子树
	}

	//只有左孩子
	else if (NULL == pCur->_pRight)
	{
		if (*pRoot == pCur)
			*pRoot = pCur->_pLeft;
		else if (pParent->_pLeft == pCur)
			pParent->_pLeft = pCur->_pLeft;
		else
			pParent->_pRight = pCur->_pLeft;
	}

	//左右孩子都存在
	else
	{
		BSTNode *pInorder = pCur->_pRight;
		pParent = pCur;
		while (pInorder->_pLeft)
		{
			pParent = pInorder;
			pInorder = pInorder->_pLeft;
		}
		pCur->_data = pInorder->_data;
		
		if (pInorder == pParent->_pLeft)
			pParent->_pLeft = pInorder->_pRight;
		else
			pParent->_pRight = pInorder->_pRight;

		free(pInorder);
		pInorder = NULL;
	}
}

//查找
BSTNode *FindBSTree(BSTNode *pRoot, SDataType data)
{
	assert(pRoot);
	BSTNode *pCur = pRoot;

	while (pCur)
	{
		if (data == pCur->_data)
			return pCur;
		else if (data < pCur->_data)
			pCur = pCur->_pLeft;
		else
			pCur = pCur->_pRight;
	}

	return NULL;
}


//中序遍历二叉搜索树
void InorderBSTree(BSTNode *pRoot)
{
	if (pRoot)
	{
		InorderBSTree(pRoot->_pLeft);
		printf("%d ", pRoot->_data);
		InorderBSTree(pRoot->_pRight);
	}
}

//销毁二叉搜索树
void DestroyBSTree(BSTNode **pRoot)
{
	assert(pRoot);
	if (*pRoot)
	{
		DestroyBSTree(&(*pRoot)->_pLeft);
		DestroyBSTree(&(*pRoot)->_pRight);
		free(*pRoot);
		*pRoot = NULL;
	}
}


/*************************************************/
//test.c

#include "BSTree.h"

void TestBSTree()
{
	BSTNode *pRoot;
	int arr[] = { 5, 4, 6, 9, 0, 2, 1, 8, 7, 3 };
	InitBSTree(&pRoot);
	int i = 0;
	for (i = 0; i < sizeof(arr) / sizeof(arr[0]); ++i)
	{
		InsertBSTree(&pRoot, arr[i]);
	}

	InorderBSTree(pRoot);
	printf("\n");

	if (FindBSTree(pRoot, 0))
		printf("0 is in BSTreeNode\n");
	else
		printf("0 is not in BSTreeNode\n");
	if (FindBSTree(pRoot, 10))
		printf("10 is in BSTreeNode\n");
	else
		printf("10 is not in BSTreeNode\n");

	DeleteBSTree(&pRoot, 0);
	InorderBSTree(pRoot);
	printf("\n");
	DeleteBSTree(&pRoot, 8);
	InorderBSTree(pRoot);
	printf("\n");
	DeleteBSTree(&pRoot, 5);
	InorderBSTree(pRoot);
	printf("\n");
}

int main()
{
	TestBSTree();
	system("pause");
	return 0;
}
