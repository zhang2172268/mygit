//逆波兰函数
//12 3 4 + * 6 - 8 2 / + 

//枚举
enum {ADD, SUB, MUL, DIV, DATA};

//定义一个结构体分别存放符号和数据
typedef struct RPN
{
	int opera;
	int data;
}RPN;

int _RPN(RPN *p, int size)
{
	int left, right;
	Stack s;
	StackInit(&s);

	while (size--)
	{
		if (DATA == p->opera)//若数组第一个元素为数据，则进行压栈，以此类型
		{
			StackPush(&s, p->data);
		}
		else//为其他则说明是符号，将栈中元素出栈，先出的为右操作数
		{
			right = StackTop(&s);
			StackPop(&s);

			left = StackTop(&s);
			StackPop(&s);

			switch (p->opera)
			{
			case ADD:
				StackPush(&s, left + right);
				break;
			case SUB:
				StackPush(&s, left - right);
				break;
			case MUL:
				StackPush(&s, left * right);
				break;
			case DIV:
				StackPush(&s, left / right);
				break;
			}
		}
		p++;
	}
	return StackTop(&s);
}

int main()
{
	//创建一个数组放逆波兰表达式
	RPN p[] = { { DATA, 12 }, { DATA, 3 }, { DATA, 4 },
	{ ADD, 0 }, { MUL, 0 }, { DATA, 6 }, { SUB, 0 },
	{ DATA, 8 }, { DATA, 2 }, { DIV, 0 }, { ADD, 0 } };

	int size = sizeof(p) / sizeof(p[0]);
	printf("%d\n", _RPN(p, size));
	system("pause");
	return 0;
}