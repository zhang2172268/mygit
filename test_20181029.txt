/*************************************************/
//BSTree.h



typedef int SDataType;

typedef struct BSTNode
{
	struct BSTNode *_pLeft;
	struct BSTNode *_pRight;
	SDataType _data;
}BSTNode;


//初始化二叉搜索树
void InitBSTree(BSTNode **pRoot);

//插入
void InsertBSTree(BSTNode **pRoot, SDataType data);

//删除
void DeleteBSTree(BSTNode **pRoot, SDataType data);

//查找
BSTNode *FindBSTree(BSTNode *pRoot, SDataType data);

//中序遍历二叉搜索树
void InorderBSTree(BSTNode *pRoot);

//销毁二叉搜索树
void DestroyBSTree(BSTNode **pRoot);




/*************************************************/
//BSTree.c


#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

//创建新结点
BSTNode *BuyBSTNode(SDataType data)
{
	BSTNode *pNewNode = NULL;
	pNewNode = (BSTNode *)malloc(sizeof(BSTNode));
	if (NULL == pNewNode)
	{
		assert(0);
		return;
	}

	pNewNode->_data = data;
	pNewNode->_pLeft = NULL;
	pNewNode->_pRight = NULL;

	return pNewNode;
}

//初始化二叉搜索树
void InitBSTree(BSTNode **pRoot)
{
	assert(pRoot);
	*pRoot = NULL;
}


//插入
void InsertBSTree(BSTNode **pRoot, SDataType data)
{
	assert(pRoot);
	if (NULL == *pRoot)
		*pRoot = BuyBSTNode(data);
	else
	{
		if (data < (*pRoot)->_data)
			InsertBSTree(&(*pRoot)->_pLeft, data);
		else if (data >(*pRoot)->_data)
			InsertBSTree(&(*pRoot)->_pRight, data);
		else
			return;
	}
}

//删除
void DeleteBSTree(BSTNode **pRoot, SDataType data)
{
	assert(pRoot);
	if (NULL == *pRoot)
		return 0;

	else
	{
		if (data < (*pRoot)->_data)
			DeleteBSTree(&(*pRoot)->_pLeft, data);
		else if (data >(*pRoot)->_data)
			DeleteBSTree(&(*pRoot)->_pRight, data);
		else
		{
			BSTNode *pCur = *pRoot;
			if (NULL == pCur->_pLeft)//只有左孩子 || 叶子结点
			{
				*pRoot = pCur->_pRight;
				free(pCur);
			}
			else if (NULL == pCur->_pRight)//只有右孩子
			{
				*pRoot = pCur->_pLeft;
				free(pCur);
			}
			else//左右孩子都存在
			{
				pCur = (*pRoot)->_pRight;
				while (pCur->_pLeft)
					pCur = pCur->_pLeft;

				(*pRoot)->_data = pCur->_data;
				DeleteBSTree(&(*pRoot)->_pRight, pCur->_data);
			}
		}
	}
}

//查找
BSTNode *FindBSTree(BSTNode *pRoot, SDataType data)
{
	//assert(pRoot);
	if (NULL == pRoot)
		return NULL;
	else
	{
		if (data == pRoot->_data)
			return pRoot;
		else if (data < pRoot->_data)
			return FindBSTree(pRoot->_pLeft, data);
		else
			return FindBSTree(pRoot->_pRight, data);
	}
}

#endif

//中序遍历二叉搜索树
void InorderBSTree(BSTNode *pRoot)
{
	if (pRoot)
	{
		InorderBSTree(pRoot->_pLeft);
		printf("%d ", pRoot->_data);
		InorderBSTree(pRoot->_pRight);
	}
}

//销毁二叉搜索树
void DestroyBSTree(BSTNode **pRoot)
{
	assert(pRoot);
	if (*pRoot)
	{
		DestroyBSTree(&(*pRoot)->_pLeft);
		DestroyBSTree(&(*pRoot)->_pRight);
		free(*pRoot);
		*pRoot = NULL;
	}
}


/*************************************************/
//test.c

#include "BSTree.h"

void TestBSTree()
{
	BSTNode *pRoot;
	int arr[] = { 5, 4, 6, 9, 0, 2, 1, 8, 7, 3 };
	InitBSTree(&pRoot);
	int i = 0;
	for (i = 0; i < sizeof(arr) / sizeof(arr[0]); ++i)
	{
		InsertBSTree(&pRoot, arr[i]);
	}

	InorderBSTree(pRoot);
	printf("\n");

	if (FindBSTree(pRoot, 0))
		printf("0 is in BSTreeNode\n");
	else
		printf("0 is not in BSTreeNode\n");
	if (FindBSTree(pRoot, 10))
		printf("10 is in BSTreeNode\n");
	else
		printf("10 is not in BSTreeNode\n");

	DeleteBSTree(&pRoot, 0);
	InorderBSTree(pRoot);
	printf("\n");
	DeleteBSTree(&pRoot, 8);
	InorderBSTree(pRoot);
	printf("\n");
	DeleteBSTree(&pRoot, 5);
	InorderBSTree(pRoot);
	printf("\n");
}

int main()
{
	TestBSTree();
	system("pause");
	return 0;
}
