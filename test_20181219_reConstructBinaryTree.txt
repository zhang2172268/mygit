/*剑指offer---重建二叉树*/

/*题目描述：
 *	输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设
 *	输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序
 *	遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
 */

/*解题思路：
 *	1.先求出根节点（前序序列第一个元素）。
 *	2.将根节点带入到中序遍历序列中求出左右子树的中序遍历序列。
 *	3.通过左右子树的中序序列元素集合带入前序遍历序列可以求出左右子树的前序序列。
 *	4.左右子树的前序序列第一个元素分别是根节点的左右儿子
 *	5.求出了左右子树的4种序列可以递归上述步骤
 */




/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        if((0 == pre.size() * vin.size()) || (pre.size() != vin.size()))
            return NULL;
        size_t root = *pre.begin();
        TreeNode* Teee = new TreeNode(root);
        
        //在中序遍历中找到根节点的位置
        size_t i = 0;
        for(i = 0; i < vin.size(); i++)
        {
            if(vin[i] == root)
                break;
        }
        
        //获取中序遍历序列的左右子树
        vector<int> vin_left(vin.begin(), vin.begin()+i);
        vector<int> vin_right(vin.begin()+i+1, vin.end());
        
        //找到左右子树的前序遍历
        vector<int> pre_left(pre.begin()+1, pre.begin()+1+i);
        vector<int> pre_right(pre.begin()+i+1, pre.end());
        
        //递归调用
        Teee->left = reConstructBinaryTree(pre_left, vin_left);
        Teee->right = reConstructBinaryTree(pre_right, vin_right);
        
        return Teee;
    }
};
